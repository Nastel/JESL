{"name":"JESL","tagline":"jKool Event Streaming Library","body":"#JESL - jKool Event Streaming Library\r\nJESL allows application developers stream time-series data to jKool Cloud.\r\nTo stream data to jKool Cloud your application must:\r\n\t\r\n\t1. Use TNT4J, or log4J+TNT4JAppender in your application\r\n\t  to log events, activities, metrics\r\n\t\r\n\t2. Obtain your jKool account and API access token \r\n\t   at https://www.jkoolcloud.com\r\n\t\r\n\t3. Use JESL Event Sink implementation (contained in this project) \r\n\t   within your tnt4j configuration. API access token will be required\r\n\t   to stream data to jKool Cloud.\r\n\t\r\n\t4. Configure your application for streaming to jKool Cloud \r\n\t   using JESL Event Sink (requires API access token).\r\n\t   See (`com.jkool.jesl.tnt4j.sink.JKCloudEventSinkFactory`)\r\n\t\r\nJESL consists of the following main components:\r\n\r\n\t1. TNT4J streaming library \r\n\t   (https://github.com/Nastel/TNT4J)\r\n\t\r\n\t2. JESL Simulator -- stream simulated events, activities and metrics\r\n\t   to jKool Cloud. Simulations are defined in xml files.\r\n\t   (see `sims/tnt4j-sim-template.xml` and `sims/order-process.xml`) \r\n\t\r\n\t3. JESL Event Sink -- TNT4J Event Sink implementation\r\n\t   to stream events to jKool Cloud.\r\n\r\n## JESL Simulator\r\nThe JESL Simulator provides the ability to simulate tracking activities\r\nand events. The activities, events, and their components are defined using\r\na XML format.  There are three major parts to a simulation definition:\r\n\r\n\t1. Sources\r\n\t   Defines the sources involved in simulated activities and events\r\n\t   \r\n\t2. Messages\r\n\t   Defines the messages that will be exchanged during activities\r\n\t   \r\n\t3. Activities and Events\r\n\t   Defines the actual activites and the subactivities and events in them\r\n\r\nThe included file `sims/tnt4j-sim-template.xml` contains a simulation definition template,\r\nalong with detailed descriptions of each element, showing the XML element\r\nhierarchy. The file order-process.xml contains a sample set of activities and\r\ntheir events, along with some sample snapshots.\r\n\r\nTo define a simulation, copy one of the supplied XML simulation definition\r\nfiles to use as a template and create the necessary activity elements.\r\n\r\nThe simulator can be run in one of two modes:\r\n\r\n\t1. Simulation (simulation type: `run`)\r\n\t   Runs default simulation file (`sims/order-process.xml`) and sends the tracking data to\r\n\t   the JESL Event Sink and/or writes the tracking data to the\r\n\t   specified file.  In this mode, the simulator can be configured to\r\n\t   run the simulation file a specified number of iterations, optionally\r\n\t   generating unique correlators and tags for each iteration of\r\n\t   the simulation file (appends a unique value to end of defined\r\n\t   correlator and tags in simulation definition file).\r\n\t\r\n\t2. Replay (simulation type: `replay`)\r\n\t   Reads previously-saved tracking data from the specified file\r\n\t   and sends it to the JESL Event Sink\r\n\r\nThe simplest way to run the simulator is to execute the file jkool-simulator.bat\r\n(or jkool-simulator.sh) as follows:\r\n\r\n\tWindows: `jkool-simulator.bat <access_token> [<iterations>]`\r\n\tUnix: `jkool-simulator.sh <access_token> [<iterations>]`\r\n\t\t\r\n`<iterations>` is the number of interations for a given simulation (1 default).\r\n\r\n<b>NOTE:</b> You will need to alter `jkool-simulator` scripts to specify\r\ncustom simulator parameters such as simulation type as well as options described\r\nfurther in this document.\r\n\r\nThe simulator also contains options for allowing the data values used for some of\r\nthe tracking component attributes to be altered to provide unique values for these\r\nattributes for each tracking activity so that each activity definition in the input\r\nfile serves as a template for the activities to generate, allowing each to be a unique\r\ninstance of an activity with the defined components.  An example of such an attribute\r\nis the Correlator.  If a Correlator is defined and the correlator value is not unique\r\nacross each activity then all activities will get stitched together into one large\r\nactivity.\r\n\r\nSome of the available options are:\r\n\r\n\t-A\t\tThis option specifies the access token to use to validate\r\n\t\t\tconnection to JESL Event Sink.  This option is required\r\n\t\t\twhen using `-T` option\r\n\r\n\t-p\t\tThis option will cause simulator to scale each time attribute\r\n\t\t\tup or down by the specified percentage.  This prevents each\r\n\t\t\tactivity from looking exactly the same, showing some variation\r\n\t\t\tin the event durations, as well as the times between events\r\n\t\r\n\t-u\t\tMakes correlators and tags unique between iterations on the\r\n\t\t\tinput file by appending a timestamp to each one, so that each\r\n\t\t\titeration over the file\twill generate independent activities\r\n\t\t\tand events\r\n\t\r\nTo see the full set of supported options, run:\r\n\r\n\t`jkool-simulator.bat help`\r\n\r\nStreaming TNT4J to jKool Cloud \r\n==============================\r\nApplications that use TNT4J can be configured to stream events and metrics to jKool Cloud\r\nby configuring application source to use JESL Event Sink (`com.jkool.jesl.tnt4j.sink.JKCloudEventSinkFactory`)\r\nConfigure your TNT4J source as follows (using `tnt4j.properties` file):\r\n```\r\n{\r\n\t....\r\n\t; event sink configuration: destination and data format\r\n\tevent.sink.factory: com.nastel.jkool.tnt4j.sink.BufferedEventSinkFactory\r\n\tevent.sink.factory.EventSinkFactory: com.jkool.jesl.tnt4j.sink.JKCloudEventSinkFactory\r\n\tevent.sink.factory.EventSinkFactory.Url: http://data.jkoolcloud.com\r\n\tevent.sink.factory.EventSinkFactory.Token: YOUR-ACCESS-TOKEN\r\n\tevent.formatter: com.nastel.jkool.tnt4j.format.JSONFormatter\r\n\t....\r\n}\r\n```\r\nBelow is an example of a sample TNT4J source (com.myco.myappl) configuration with \r\nJESL Event Sink (`com.jkool.jesl.tnt4j.sink.JKCloudEventSinkFactory`):\r\n```\r\n{\r\n\tsource: com.myco.myappl\r\n\tsource.factory: com.nastel.jkool.tnt4j.source.SourceFactoryImpl\r\n\tsource.factory.GEOADDR: NewYork\r\n\tsource.factory.DATACENTER: HQDC\r\n\tsource.factory.RootFQN: SERVER=?#DATACENTER=?#GEOADDR=?\t\r\n\t\r\n\ttracker.factory: com.nastel.jkool.tnt4j.tracker.DefaultTrackerFactory\r\n\tdump.sink.factory: com.nastel.jkool.tnt4j.dump.DefaultDumpSinkFactory\r\n\r\n\t; event sink configuration: destination and data format\r\n\tevent.sink.factory: com.nastel.jkool.tnt4j.sink.BufferedEventSinkFactory\r\n\tevent.sink.factory.EventSinkFactory: com.jkool.jesl.tnt4j.sink.JKCloudEventSinkFactory\r\n\tevent.sink.factory.EventSinkFactory.Url: http://data.jkoolcloud.com\r\n\tevent.sink.factory.EventSinkFactory.Token: YOUR-ACCESS-TOKEN\r\n\tevent.formatter: com.nastel.jkool.tnt4j.format.JSONFormatter\r\n\r\n\t; Configure default sink filter based on level and time (elapsed/wait)\r\n\tevent.sink.factory.Filter: com.nastel.jkool.tnt4j.filters.EventLevelTimeFilter\r\n\tevent.sink.factory.Filter.Level: TRACE\r\n\t; Uncomment lines below to filter out events based on elapsed time and wait time\r\n\t; Timed event/activities greater or equal to given values will be logged\r\n\t;event.sink.factory.Filter.ElapsedUsec: 100\r\n\t;event.sink.factory.Filter.WaitUsec: 100\r\n\t\r\n\ttracking.selector: com.nastel.jkool.tnt4j.selector.DefaultTrackingSelector\r\n\ttracking.selector.Repository: com.nastel.jkool.tnt4j.repository.FileTokenRepository\r\n}\r\n```\r\n<b>NOTE:</b> You will need to provide your actual API access token in (`event.sink.factory.EventSinkFactory.Token`).\r\n\r\n# Project Dependencies\r\nJESL requires the following:\r\n* JDK 1.6+\r\n* TNT4J (https://github.com/Nastel/TNT4J)\r\n* Apache HTTP Client 4.2.5 (http://hc.apache.org/httpcomponents-client-ga/)\r\n* Apache HTTP Core 4.3.4 (http://hc.apache.org/httpcomponents-client-ga/)\r\n\r\n# Related Projects\r\n* TrackingFilter (http://nastel.github.io/TrackingFilter/)\r\n* PingJMX (http://nastel.github.io/PingJMX/)\r\n\r\n# Available Integrations\r\n* TNT4J (https://github.com/Nastel/TNT4J)\r\n* Log4J (http://logging.apache.org/log4j/1.2/)\r\n* jkoolcloud.com (https://www.jkoolcloud.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}